@ -1,260 +0,0 @@
import java.sql.SQLOutput;
import java.util.*;
import java.util.LinkedList;
import java.util.Queue;

public class Main {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        LinkedList<String> adici = new LinkedList<>();
//Exercício 1 - Soma de elementos\\
// um programa que leia 10 números inteiros em um array e imprima a soma de todos os elementos.

//        int[] num = {1,2,5,9,77,56,21,29,
//                14,51,47,58,14,23,47};
//        int soma = 0;
//
//        for (int i =0; i < 10; i++){
//            soma += num[i];
//            System.out.println(num[i]);
//        }
//        System.out.println("A soma dos dez primeiros valores são: "+soma);

//Exercício 2 - Inversão de array\\
//Leia um array de 5 elementos e imprima o array na ordem inversa.

//        int[] numbers = {1,2,5,9,77};
//
//        int n = numbers.length;
//
//        for (int i = 0; i < n / 2; i++){
//            int temp = numbers[i];
//            numbers[i] = numbers[n - 1 - i];
//            numbers[n - 1 - i] = temp;
//        }
//
//        System.out.println("Array invertido: ");
//        for (int num : numbers) {
//            System.out.println(num +"");
//        }

// Exercício 3 - Lista de nomes\\
// Crie um programa que leia nomes de pessoas até que o usuário digite "sair". Armazene em um
// ArrayList e, ao final, exiba todos os nomes cadastrados.

//        String[] names = new String[10];
//
//        System.out.println("Digite até 10 nomes: ");
//
//        for (int i = 0; i < names.length; i++) {
//            System.out.println("Nome " + (i + 1) + ": ");
//            names[i] = input.nextLine();
//        }
//
//        System.out.println("\nNomes Digitados:");
//        for(String name : names){
//            System.out.println(name);
//        }
//
//        input.close();

// Exercício 4 - Remoção de elementos\\
// Adapte o exercício anterior para permitir que o usuário também remova um nome da lista,
// caso queira.
//        ArrayList<String> nomes = new ArrayList<>();
//        nomes.add("Heric");
//        nomes.add("Eduarda");
//        nomes.add("Maria Elis");
//
//        System.out.println("Nomes cadastrados " + nomes);
//
//        System.out.println("Digite o para remover: ");
//        String nomeParaRemover = input.nextLine();
//
//        if (nomes.remove(nomeParaRemover)) {
//            System.out.println(nomeParaRemover + " foi removido!");
//        } else {
//            System.out.println("Nome não encontrado.");
//        }
//
//        System.out.println("Nomes restantes " + nomes);
//
//        input.close();

//Exercício 5 - Fila de atendimento\\
//Implemente uma fila de atendimento usando LinkedList. Adicione pessoas à fila e,
//quando o comando "atender" for digitado,
//remova a primeira pessoa e informe quem foi atendido.

//        String comando;
//
//        System.out.println("Sistema de fila de atendimento");
//        System.out.println("Digite um nome para entrar na fila ou 'atender'" +
//                " para chamar o próximo. ");
//        System.out.println("Digite 'sair' para encerrar o programa");
//
//        while (true) {
//            System.out.println("Comando: ");
//            comando = input.nextLine();
//
//            if (comando.equalsIgnoreCase("Sair")){
//                System.out.println("Encerrando sistema.");
//                break;
//            }else if (comando.equalsIgnoreCase("atender")){
//                if (!adicionar.isEmpty()) {
//                    String atendido = adicionar.removeFirst();
//                    System.out.println("Atendido: " + atendido);
//                } else {
//                    System.out.println("A fila está vazia");
//                }
//            } else {
//                adicionar.addLast(comando);
//                System.out.println(comando + "Entrou na fila");
//            }
//            System.out.println("fila atual: " + adicionar);
//        }
//        input.close();


 //Exercício 6 - Pilha de livros\\
//Implemente uma pilha onde cada elemento é o nome de um livro. Permita adicionar livros na pilha,
//visualizar o topo, remover o topo, e mostrar a pilha completa.

//    Stack<String> pilha = new Stack<>();
//    String livros;
//
//        System.out.println("Digite os nomes dos livros. Digite 'Sair' para encerrar");
//
//        while (true) {
//            System.out.println("Nome do livro: ");
//            livros = input.nextLine();
//
//            if (livros.equalsIgnoreCase("Sair")) {
//                break;
//            }
//
//            pilha.add(livros);
//            System.out.println("Livro adicionado " + livros);
//        }
//        System.out.println("\nLista de livros cadastrados:");
//        for (int i = 0; i < pilha.size(); i++){
//            System.out.println((i + 1) + ". " + pilha.get(i));
//        }
//
//        input.close();

//Exercício 7 - Conjunto de números únicos\\
//Leia diversos números inteiros do usuário até que ele digite 0. Armazene os números em,
//um HashSet e, ao final, exiba todos os números (sem repetição).

//        HashSet<Integer> conj = new HashSet<>();
//        int num;
//
//        System.out.println("Digite numeros inteiros (0 para encerrar): ");
//
//        while (true) {
//            System.out.println("Numero: ");
//            num = input.nextInt();
//
//            if(num == 0) {
//                break;
//            }
//
//            conj.add(num);
//        }
//        System.out.println("\nNúmeros digitados (Sem repetição): ");
//            for (int n: conj) {
//                System.out.println(n);
//            }
//Exercício 8 - Simulando uma fila\\
//Use Queue com LinkedList para simular uma fila de pessoas para entrar em uma sala de cinema.
//Cada vez que uma pessoa entra, ela é removida da fila.
//    Queue<String> filaDeCinema = new LinkedList<>();
//
//        filaDeCinema.add("Heric");
//        filaDeCinema.add("Eduarda");
//        filaDeCinema.add("Maria Eliz");
//        filaDeCinema.add("Arly");
//        filaDeCinema.add("Braulio");
//
//        System.out.println("\nFila inicial: " +filaDeCinema);
//
//        while (!filaDeCinema.isEmpty()){
//            String pessoa = filaDeCinema.poll();
//            System.out.println(pessoa + ", Entrou na Sala de cinema ");
//        }
//
//        System.out.println("\nTodos já entraram no cinema, fila vazia" +filaDeCinema.isEmpty());
//
//Exercício 9 - Agenda de contatos
//Crie uma agenda de contatos usando HashMap onde a chave é o nome da pessoa
// e o valor é o número de telefone. Permita adicionar, buscar e remover contatos.
        Map<String, String> mapaAgenda = new HashMap<>();
        int opcao;

        do {
            System.out.println("\n --Agenda de Contatos--");
            System.out.println("1- Adcionar ");
            System.out.println("2- Buscar ");
            System.out.println("3- Remover ");
            System.out.println("4- Listar Contatos");
            System.out.println("0 Sair");
            System.out.println("Escolha uma opção: ");
            opcao = input.nextInt();
            input.nextLine();

            switch (opcao) {
                case 1:
                    System.out.println("Digite o nome da pessoa: ");
                    String pessoa = input.nextLine();
                    System.out.println("Digite o número de telefone");
                    String numero = input.nextLine();
                    mapaAgenda.put(pessoa, numero);
                    System.out.println("Contato adicionado com Sucesso!");
                    break;

                case 2:
                    System.out.println("Digite um nome para buscar: ");
                    String pesq = input.nextLine();
                    String telPesq = mapaAgenda.get(pesq);
                    if (telPesq != null) {
                        System.out.println("Telefone de " + pesq + ": " + telPesq);
                    } else {
                        System.out.println("Contato não encontrado, tente um outro nome!");
                    }
                    break;

                case 3:
                    System.out.println("Digite o nome para ser removido da agenda: ");
                    String remover = input.nextLine();
                    if (mapaAgenda.remove(remover) != null) {
                        System.out.println("Contato remvido com sucesso!");
                    } else {
                        System.out.println("Contato não encontrado");
                    }
                    break;

                case 4:
                    System.out.println("\n ** Agenda de contatos **");
                    if (mapaAgenda.isEmpty()) {
                        System.out.println("Agenda vazia!");
                    } else {
                        for (Map.Entry<String, String> contato : mapaAgenda.entrySet()) {
                            System.out.println("Nome: " + contato.getKey() + " | Telefone" + contato.getValue());
                        }
                    }
                    break;

                case 0:
                    System.out.println("<** SAINDO **>");
                    break;
                default:
                    System.out.println("Opção Inválida");
            }
        }while (opcao != 0);

        input.close();

    }
}
